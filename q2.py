import nltk
from nltk import CFG
from nltk.parse.chart import ChartParser

def check_ambiguity(grammar_text, input_string):
    # Load the CFG
    grammar = CFG.fromstring(grammar_text)

    # Create a parser
    parser = ChartParser(grammar)

    # Tokenize the input string
    tokens = input_string.split()

    # Parse the string and collect all parse trees
    parse_trees = list(parser.parse(tokens))

    if len(parse_trees) == 0:
        print("The string is not generated by the grammar.")
    elif len(parse_trees) == 1:
        print("The grammar is unambiguous for this string. Only one parse tree found.")
    else:
        print(f"The grammar is ambiguous for this string. {len(parse_trees)} parse trees found.")
        for i, tree in enumerate(parse_trees):
            print(f"\nParse Tree {i+1}:")
            print(tree)
            tree.pretty_print()


grammar_text = """
S -> S '+' S
S -> S '*' S
S -> 'a'
"""

input_string = "a + a * a"

check_ambiguity(grammar_text, input_string)
